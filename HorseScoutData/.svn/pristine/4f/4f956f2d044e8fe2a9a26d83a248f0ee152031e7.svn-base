//index.js
import util from '../../utils/util.js';
import * as echarts from '../../ec-canvas/echarts';
const app = getApp().globalData;
const itemWidth = 84;
Page({
  data: {
    imgUrl: app.url,
    movies: [
      {
        id: 0,
        headImg: app.url + 'Patriarch/head-portrait.png',
        name: "默认孩子",
        age: 8,
        sex: 1,
        dec: "swpYello"
      }
    ],
    dataInfo: [
      {
        id: 1,
        subNum: "C1609050001",
        percentage: 30,
        grade: "SPCC",
        spec: "2.5*1200*C",
        weight: 500 
      },
      {
        id: 2,
        subNum: "A1609050001",
        percentage: 80,
        grade: "SPCC",
        spec: "3.5*1200*C",
        weight: 100
      }
    ],
    thisnum: 0,
    physiqueEc: {
      onInit: initChartPhysique
    },
    peopleEc: {
      onInit: initChartPeople
    },
    list: ['1', '2', '3', '4'],
    //maxSport: maxSport,
    boxWidth: 0,
    isLoading: false,
    TestAgeResult:{},
    StatisticList:[],
    childId: 50,
    pageNo: 1,
    pageSize: 10,
    height: 260,
    totalTime: 0,
    dayTime: 0,
    weekTime: 0,
    totalDay: 0,
    continueDay: 0,
    isMore:false,
    childrenId:50,
    heights: 300,
    cardiopulmonaryFunctionValue:0,
    cardiopulmonaryFunctionValues:0,
    bmiValue:0,
    bmiValues:0 
  },
  shareIndex(e){},
  onLoad(e) {},
  onReady(e){},
  onReady(){},
  onShow(){
    const that = this;
    if(wx.getStorageSync('userInfo')){
      if (wx.getStorageSync('userInfo').oauthToken.token){
        //已登录取孩子信息
        getStatisticList(that)
        getTestAgeResult(that)
      }else{
        //未登录取默认数据
      }
    }else{

    }
  },
  onHide(){},
  onUnload(){},
  onPullDownRefresh() {},
  onReachBottom(){},
  onShareAppMessage() {},
  //再次测试
  Testagin: function () {
    wx.navigateTo({
      url: '../../pages/Patriarch/Test/Test',
    })
  },
  //去选择锻炼计划
  ExerciseProgram: function () {
    wx.switchTab({
      url: '../../pages/Exercise/Exercise-Program/Exercise-Program',
    })
  },
  swiperChange: function (e) {
    this.setData({
      thisnum: e.detail.current
    })
  },
  refreshData: function () {
    let _this = this;
    if (_this.data.childId == 0) {
      return;
    }
    let bWidth = itemWidth * _this.data.StatisticList.length + 60;
    _this.setData({
      isLoading: true,
      boxWidth: bWidth,
      pageNo: _this.data.pageNo+1
    });
    if (_this.data.isMore){
      _this.setData({ isLoading: false, boxWidth: (itemWidth * (_this.data.StatisticList.length) )-22})
      return;
    }else{
      getStatisticList(_this)
    }
  }
});


function initChartPhysique(canvas, width, height) {
  const chart = echarts.init(canvas, null, {
    width: width,
    height: height
  });
  canvas.setChart(chart);

  var option = {
    backgroundColor: '#fff',
    radar: [
      {
        indicator: [
          { text: '力量', max: 10 },
          { text: '速度', max: 10 },
          { text: '耐力', max: 10 },
          { text: '柔韧', max: 10 },
          { text: '协调', max: 10 }
        ],
        center: ['50%', '50%'],
        radius: '80%',
        startAngle: 60,
        splitNumber: 10,
        shape: 'circle',
        name: {
          textStyle: {
            color: '#666',
            fontSize: 14
          }
        },
        splitArea: {
          areaStyle: {
            color: ['rgba(0, 0, 0, 0)']
          }
        },
        axisLine: {
          lineStyle: {
            color: '#E6E6E6'
          }
        },
        splitLine: {
          lineStyle: {
            color: '#E6E6E6'
          }
        }
      }
    ],
    series: [
      {
        name: '体质统计',
        type: 'radar',
        data: [
          {
            value: [8, 5, 6, 7, 4],
            name: '图1',
            symbol: 'circle',
            itemStyle: {
              color: '#FDC54A'
            },
            lineStyle: {
              width: 1,
              color: '#FDC54A'
            },
            label: {
              show: true,
              color: '#fff',
              width: 24,
              height: 24,
              lineHeight: 24,
              align: 'center',
              verticalAlign: 'middle',
              borderRadius: 24,
              position: 'inside',
              backgroundColor: '#FDC54A',
              rich: {
                a: {
                  color: '#fff'
                }
              }
            },
            areaStyle: {
              normal: {
                color: '#FDC54A',
                opacity: 0.25
              }
            }
          }
        ]
      }
    ]
  };

  chart.setOption(option);
  return chart;
}

function initChartPeople(canvas, width, height) {
  const chart = echarts.init(canvas, null, {
    width: width,
    height: height
  });
  canvas.setChart(chart);

  var option = {
    title: {
      text: '分值0-100分',
      textStyle: {
        color: '#666',
        fontSize: 13,
        fontWeight: 'normal'
      },
      right: '4%',
      top: 8
    },
    /*tooltip: {
        trigger: 'axis',
        axisPointer: {
            lineStyle: {
                color: '#fff'
            }
        }
    },*/
    grid: {
      left: '3%',
      right: '4%',
      bottom: '2%',
      containLabel: true
    },
    xAxis: {
      type: 'category',
      boundaryGap: false,
      axisLine: {
        show: false
      },
      axisTick: {
        show: false
      },
      data: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
    },
    yAxis: {
      type: 'value',
      name: '分值的总人数',
      nameGap: 35,
      nameTextStyle: {
        color: '#666',
        fontSize: 13
      },
      splitNumber: 2,
      splitLine: {
        lineStyle: {
          color: '#e2e2e2',
          type: 'solid'
        }
      },
      axisLine: {
        show: false
      },
      axisTick: {
        show: false
      }
    },
    series: [
      {
        data: [0, 10, 90, 18, 30, 45, 55, 70, 88, 37, 0],
        type: 'line',
        showSymbol: false,
        symbolSize: 2,
        smooth: true,
        itemStyle: {
          normal: {
            color: "#F882B6"
          },
        },
        lineStyle: {
          width: 1
        },
        areaStyle: {
          normal: {
            color: '#F882B6',
            opacity: 0.3
          }
        },
        markPoint: {
          symbol: 'roundRect',
          symbolSize: [34, 24],
          symbolOffset: [16, -20],
          label: {
            formatter: function (param) {
              return param.value + '人';
            }
          },
          itemStyle: {
            color: '#5cd3c9'
          },
          data: [{
            name: '最大值',
            type: 'max'
          }]
        }
      },
      {
        type: 'bar',
        barWidth: '1',
        itemStyle: {
          normal: {
            color: "#fff"
          },
        },
        data: [0, 0, 90, 0, 0, 0, 0, 0, 0, 0, 0],
      }
    ]
  };

  chart.setOption(option);
  return chart;
}
function getStatisticList(that){
  wx.request({
    url: app.rQUrl+'/v1/exercisePlan/getStatisticListByChildId',
    method:'GET',
    header:{
      'token':wx.getStorageSync('userInfo').oauthToken.token
    },
    data:{
      childId: that.data.childId,
      pageNo: that.data.pageNo,
      pageSize: that.data.pageSize,
      height: that.data.height
    },
    success(res){
      if(res.data.code == '10000'){
        let result = res.data.response;
        result.reverse();
        if(that.data.pageNo == 1 && result.length == 0){
          that.setData({ isLoading: false, isMore: true, boxWidth: (itemWidth*(that.data.StatisticList.length-1)-22)})
          return;
        }else if(that.data.pageNo >1 && result.length > 0){
          for (let i = 0; i < result.length; i++) {
            result[i].dataDay = result[i].dataDay.substring(result[i].dataDay.length - 2, result[i].dataDay.length);
            result[i].dataMonth = result[i].dataMonth.substring(result[i].dataDay.length - 2, result[i].dataDay.length);
            result[i].dayTime = (result[i].dayTime / 60000).toFixed(1);
          }
          let StatisticList = that.data.StatisticList.concat(result);
          that.setData({
            StatisticList: result,
            toDayItem: 'toDayItem',
            boxWidth: (itemWidth * result.length) - 22,
            isLoading: false,
          })
        }else{
          if(result.length == 0){
            that.setData({ isLoading: false, isMore: true, boxWidth: (itemWidth * (that.data.StatisticList.length) ) - 22})
            return;
          }
          for (let i = 0; i < result.length; i++) {
            result[i].dataDay = result[i].dataDay.substring(result[i].dataDay.length - 2, result[i].dataDay.length);
            result[i].dataMonth = result[i].dataMonth.substring(result[i].dataMonth.length - 2, result[i].dataMonth.length);
            result[i].dayTime = (result[i].dayTime / 60000).toFixed(1);
          }
          that.setData({
            StatisticList: result,
            toDayItem: 'toDayItem',
            boxWidth: (itemWidth * result.length) - 22,
            totalTime: (result[9].totalTime/60000).toFixed(1),
            dayTime: (result[9].dayTime / 60000).toFixed(1),
            weekTime: (result[9].weekTime / 60000).toFixed(1),
            totalDay: result[9].totalDay,
            continueDay: result[9].continueDay,
            isLoading: false,
          })
        }
      }else{
        wx.showToast({
          title: res.data.msg,
          icon:'none'
        })
      }
    },
    fail(info){
      wx.showToast({
        title: info.data.msg,
        icon:'none'
      })
    }
  })
}
function getTestAgeResult(that){
  wx.request({
    url: app.rQUrl+'/v1/corporeityTest/getTestAgeResult',
    method:'GET',
    header: { 'token': wx.getStorageSync('userInfo').oauthToken.token},
    data:{
      childrenId: that.data.childrenId,
      height: that.data.heights,
    },
    success(res){
      if(res.data.code == "10000"){
        let result = res.data.response;
        result.cardiopulmonaryFunctionValue = result.cardiopulmonaryFunctionValue.toFixed(1);
        result.bmiValue = result.bmiValue.toFixed(1);
        let a = result.cardiopulmonaryFunctionValue;
        let b = a.split(".");
        let x = b[0];
        let y = b[1];
        let c = result.bmiValue;
        let d = c.split(".");
        let e = d[0];
        let f = d[1];
        that.setData({ 
          TestAgeResult: result,
          cardiopulmonaryFunctionValue: x,
          cardiopulmonaryFunctionValues: y,
          bmiValue:e,
          bmiValues:f
        })
      }else{
        wx.showToast({
          title: res.data.msg,
          icon:'none'
        })
      }
    },
    fail(info){
      wx.showToast({
        title: info.data.msg,
        icon:'none'
      })
    }
  })
}


