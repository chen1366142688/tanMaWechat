var JMessage = require('./utils/jmessage-wxapplet-sdk-1.4.0.min.js');
const jim = new JMessage({
  debug: false
});
if (!wx.canIUse('getUpdateManager')) {
  wx.showModal({
    title: '提示',
    content: '当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。'
  })
}
const updateManager = wx.getUpdateManager()

updateManager.onCheckForUpdate(function (res) {
  // 请求完新版本信息的回调 
  // console.log(res.hasUpdate)
})

updateManager.onUpdateReady(function () {
  wx.showModal({
    title: '更新提示',
    content: '新版本已经准备好，点击重启应用？',
    showCancel: false,
    success: function (res) {
      if (res.confirm) {
        // 新的版本已经下载好，调用 applyUpdate 应用新版本并重启
        wx.setStorageSync("VERSION-UPDATE", 1);
        updateManager.applyUpdate()
      } else if (res.cancel) {
        updateManager.applyUpdate()
      }
    }
  })

})

updateManager.onUpdateFailed(function () {
  // 新的版本下载失败
  wx.showModal({
    title: '下载提示',
    content: '新版本下载失败，请手动删除本地小程序重新下载',
  })
})
wx.setStorageSync('locations', {
  result: {
    location: { "lat": 30.64242, "lng": 104.04311 },
    address: "四川省成都市武侯区益州大道中段移动互联大厦1800号",
    address_component: {
      nation: '中国',
      province: '四川省',
      city: '成都市',
      district: '武侯区',
      street: '益州大道中段',
      street_number: '益州大道中段移动互联大厦1800号'
    }
  }
})
let classIdList = new Array();
//app.js
App({
  onLaunch: function (ops) {
    if (ops.scene == 1044) {
    }
    let that = this;
    wx.onNetworkStatusChange(function (res) {
      if (res.networkType=='none'){
        wx.reLaunch({
          url: '../../../pages/welcome/welcomeNo/welcomeNo',
        })
      }
    })
    //启动缓存清理
    nativeSaveManage();
    // 展示本地存储能力
    var logs = wx.getStorageSync('logs') || []
    logs.unshift(Date.now())
    wx.setStorageSync('logs', logs);
    getLocations(that);
    
    wx.login({
      success: res => {
        let result = getStorageToken("token").token
        if (!result){
          wx.navigateTo({
            url : "../../../pages/login/login"
          })
        }else{
          let vm = this;
          tokenLogin(vm,result)
        }
      }
    });
  }, 
  globalData: {
    userInfo: null,
    //***************************************开发环境*********************************** */
    // url: 'http://192.168.3.18:8081', //局域网开发环境
    //  url: 'http://localhost:8081',
    

    //*******************************测试环境***************************************************

    url: 'https://patriarch-tm.tanmasports.com/teacher', // 公网测试地址
    htmlUrl: 'https://timosports.cn/static/html/page',

    //  url: 'https://timosports.cn/gateway', // 公网测试地址
    //  htmlUrl: 'https://timosports.cn/static/html/page',



    //*******************************正式环境*************************************************** */

    // url: 'https://www.timosports.cn/gateway', // 公网测试地址
    htmlUrl: 'https://www.timosports.cn/static/html/page',

    //*******************************静态资源*************************************************** */
    imgUrl: 'http://xlrtimo.oss-cn-beijing.aliyuncs.com/timo/imgs/',  //全局的h5网页的网址
    newImgUrl: 'http://xlrtimo.oss-cn-beijing.aliyuncs.com/timo/imgs/studentNewImg/',

    //*******************************探马赛事报名*************************************************** */
    //探马赛事报名接口地址
    tanmaCompetitionUrl:"https://timosports.cn/cp",
    // tanmaCompetitionUrl: "https://www.timosports.cn/cp",

    //探马赛事报名报名HTML地址
    tanmaCompetitionHtmlUrl: "https://timosports.cn/cp/user",
    // tanmaCompetitionHtmlUrl: "https://www.timosports.cn/cp/user",
    // tanmaCompetitionHtmlUrl: "http://localhost:8089/cp/user",
    //*************************************************************************** */

    getLocations: function(){
      getLocations(this);
    },
    defaultLocation: wx.getStorageSync('locations'),
    jim: jim,
    chatPageObject: null,
    chatListPageObject: null,
    classIdList: classIdList,
    noType: function () {
    wx.getNetworkType({
      success: function (res) {
        // 返回网络类型, 有效值：
        // wifi/2g/3g/4g/unknown(Android下不常见的网络类型)/none(无网络)
        var networkType = res.networkType
        if (res.networkType == 'none') {
          wx.reLaunch({
            url: '../../../pages/welcome/welcomeNo/welcomeNo',
          })
        }
      }
    })
  },
    getTotlCount: function () {
      setTimeout(function () {
        if (wx.getStorageSync('IM_COUNT') && wx.getStorageSync('IM_COUNT') * 1 > 0) {
          wx.setTabBarBadge({
            index: 3,
            text: (wx.getStorageSync('IM_COUNT') * 1) + ""
          })
        } else {
          wx.removeTabBarBadge({
            index: 3
          })
        }
      }, 500);
    },
  }
})
function getLocations(that) {
  let isLocation = false;//是否定位成功
  let locationInfo={
    latitude:"30.64242",
    longitude:"104.04311",
    provinceId: "510",
    provinceName: "四川省",
    cityId:"510100000000",
    cityName:"成都市",
    countyId:"510107000000",
    countyName:"武侯区",
    address:"成都市",
  }
  wx.setStorageSync('LOCATION_INFO', locationInfo);
  var QQMapWX = require('utils/qqmap-wx-jssdk.js');
  var qqmapsdk;
  // 实例化API核心类
  qqmapsdk = new QQMapWX({
    key: 'BX6BZ-ZDEWF-EQVJ3-JPL6W-BPU6Q-4PFHB'
  });
  wx.getLocation({
    type: 'gcj02', //返回可以用于wx.openLocation的经纬度
    success: function (res) {
      var latitude = res.latitude
      var longitude = res.longitude
      // 调用接口
      qqmapsdk.reverseGeocoder({
        location: {
          latitude: latitude,
          longitude: longitude
        },
        success: function (res) {
          
        }
      });
    }
  })
  setTimeout(function () {
    if (isLocation == false) {
      let baseInfo = wx.getStorageSync('studentBaseInfo');
      if (baseInfo != null && baseInfo.provinceId != null && baseInfo.cityId != null && baseInfo.countyId != null){
        locationInfo.provinceId = baseInfo.provinceId;
        locationInfo.cityId = baseInfo.cityId;
        locationInfo.countyId = baseInfo.countyId;
      }
      wx.setStorageSync('LOCATION_INFO', locationInfo);
    }
  }, 3000);
}

function getStudentBaseInfo(vm) {
  wx.request({
    url: vm.globalData.url + '/v1/student/getStudentStorageInfoByUserId',
    data: {
      "userId": wx.getStorageSync("userInfo").userId
    },
    method: 'GET',
    header: { 'token': wx.getStorageSync('userInfo').token },
    success: (res) => {
      if (res.data.code == '10000') {
        var data = res.data.response;
        wx.setStorageSync('studentBaseInfo', data);
      }
    },
    fail: (info) => {
      console.log("请求失败了");
    }
  })
}

/***********************************IM相关***********************************/

//本地消息存储
function nativeSaveMessage(imUserName, imContent, messageDate, that, date) {
  let dateKey = 'IM_' + messageDate + "_" + imUserName;//聊天记录key  格式  IM_20180502_studentIM9
  let userKey = 'IM_DATE_' + imUserName;//用户聊天日历   IM_DATE_studentIM9
  //消息发生时间
  let tempTime = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate() + ' ' + date.getHours() + ':' + date.getMinutes();
  //锁定当前本地存储状态
  if (!wx.getStorageSync('IM_NATICE_SAVE_SYNC')) {
    wx.setStorageSync('IM_NATICE_SAVE_SYNC', true)
    //获取当前消息列表
    let newsList = wx.getStorageSync(dateKey);
    let userDateList = wx.getStorageSync(userKey);
    var newarray = [{ imUserName: imUserName, imContent: imContent, imtype: 'other', time: tempTime }];
    if (newsList) {
      newsList = newsList.concat(newarray);
    } else {
      newsList = newarray;
    }
    let tempDate = [messageDate];
    if (userDateList) {
      //判断历史消息时间 是否存在当天数据
      let tempDateHave = false;
      for (let k = 0; k < userDateList.length; k++) {
        if (userDateList[k] == messageDate) {
          tempDateHave = true;
        }
      }
      if (!tempDateHave) {
        userDateList = userDateList.concat(tempDate)
      }
    } else {
      userDateList = [messageDate];
    }
    //存储当天数据
    wx.setStorageSync(dateKey, newsList);
    //存储当前用户聊天记录日期
    wx.setStorageSync(userKey, userDateList);
    //更新总未读消息数
    if (wx.getStorageSync('IM_COUNT') && wx.getStorageSync('IM_COUNT') != "") {
      wx.setStorageSync('IM_COUNT', wx.getStorageSync('IM_COUNT') + 1);
    } else {
      wx.setStorageSync('IM_COUNT', 1);
    }
    //解锁存储操作
    wx.setStorageSync('IM_NATICE_SAVE_SYNC', false)
  } else {
    //如果当前以及被锁定 则延迟 后重新执行
    setTimeout(function () {
      nativeSaveMessage(imUserName, imContent, messageDate, that, date)
    }, 10);
  }
  that.globalData.getTotlCount();
}

//本地缓存管理
function nativeSaveManage() {
  wx.getStorageInfo({
    success: function (res) {
      if (res.currentSize > 8000) {
        for (let i = 0; i < res.keys.length; i++) {
          if (res.keys[i].length > 9 && res.keys[i].substr(0, 8) == 'IM_DATE_') {
            let tempDataList = wx.getStorageSync(res.keys[i]);
            if (tempDataList && tempDataList.length > 0) {
              if (tempDataList.length > 10) {
                let tempList = new Array(10);
                let temCount = 9;
                for (let j = tempDataList.length - 1; j >= 0; j--) {
                  if (temCount >= 0) {
                    tempList[temCount] = tempDataList[j];
                    temCount--;
                  } else {
                    wx.removeStorageSync('IM_' + tempDataList[j] + "_" + res.keys[i].substr(8, res.keys[i].length));
                  }
                }
                wx.setStorageSync(res.keys[i], tempList);
              }
            } else {
              wx.removeStorageSync(res.keys[i]);
            }
          }
        }
      }
    }
  })
}
// 判断token
function getStorageToken(name){
  return wx.getStorageSync(name)
}
// token登录
function tokenLogin(vm,token){
  wx.request({
    url: vm.globalData.url + '/v1/auth/login/token',
    method : "GET",
    header : {token : token},
    success : function(res){
      if (res.data.code == 10000){
        wx.setStorageSync("token", { token: res.data.response.oAuthTokenVO.token })
        wx.setStorageSync("userInfo", res.data.response)
      }else{
        wx.navigateTo({
          url: '../../../pages/login/login',
        })
      }
    }
  })
}

/***********************************IM相关***********************************/
